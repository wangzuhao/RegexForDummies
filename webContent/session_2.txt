{name:"session 2", layoutItems: [
                {header:"Tests", sessionIndex:"2",
                subHeader:'To write an regular expression to find match the entire string of the cases and skip some',
                vModel:"Match aD1^ \nMatch bEf@ \nMatch cFH. \nSkip CD1&"},
                {header:"Editable Code Block",
                subHeader:'Please write your regex here',
                vModel:""},
                {header:"Match a specified character", subHeader:'',
                vModel:"The first thing to recognize when using regular expressions is that everything is essentially a character, and in this tutorial, you will learn how to  write patterns to match characters including a specified character like a number or letter, a range of characters or any characters. You will first need to get familiar with the following syntax which will be used throughout this tutorial.\n \nWriting a pattern to match a specified character is as simple as writing them out directly. For example, given a text abcdefg123, if you want to match characters fg12, you can just key in fg12 to match them.\n \nthe character \\d can be used in place of any digit from 0 to 9 and \\D can be used in replace of any non-digit character. The preceding slash distinguishes it from the simple d or D character and indicates that it is a metacharacter. Given a text abc123xyz, searching \\d will match digits 1 since it is the first digit from the text and \\d\\D will match 3x since it is the first digit followed by non-digit character combination in the text. Similarly, \\w and \\W can be used in place of any alphanumeric character and any non-alphanumeric character. Whereas \\s and \\S can be used in place of any whitespace and any non-whitespace character.\n \n. (dot) metacharacter can match any single character (letter, digit, whitespace, everything). You may notice that this actually overrides the matching of the period character, so in order to specifically match a period, you need to escape the dot by using a slash \\. accordingly.\n \nThere is a method for matching specific characters using regular expressions, by defining them inside square brackets. For example, the pattern [abc] will only match a single a, b, or c letter and nothing else. And we use a similar expression that excludes specific characters using the square brackets and the ^ (hat). For example, the pattern [^abc] will match any single character except for the letters a, b, or c.\n \nwhat if we want to match a character that can be in a sequential range characters? Do we have no choice but to list them all out? Luckily, when using the square bracket notation, there is a shorthand for matching a character in list of sequential characters by using the dash to indicate a character range. For example, the pattern [0-6] will only match any single digit character from zero to six, and nothing else. And likewise, [^n-p] will only match any single character except for letters n to p."}
                ], status:" ðŸ”´"}
