{name:"session 3", layoutItems: [
                {header:"Tests", sessionIndex:"3",
                subHeader:'Write a regular expression use what you have learned in this session to',
                vModel:"Match yyyyess \nMatch yyeeees \nMatch yyss \nSkip y"},
                {header:"Editable Code Block",
                subHeader:'Please write your regex here',
                vModel:""},
                {header:"Advanced character match", subHeader:'',
                vModel:"Sam: Now you know how to match a set of specific characters, but what if we want to match a specific number of repetitions of characters? Say, pick ooops out of ops and oops?\n\nSnow: Thatâ€™s easy! Just put three â€˜oâ€™s in my Regex!\n\nSam: What if I need a hundred â€˜oâ€™s, do you write them one hundred times?\n\nSnow: Hmmm...\n\nSam: There is a smarter way, use the Curly Braces! If you need exactly three â€˜oâ€™s, write o{3}. If you need no less than one and no more than three â€˜oâ€™s, write o{1,3}. You may also match multiple characters like [wxy]{5}, which matches exactly five characters with each of which could be a w, x or y.\n\nSnow: Thatâ€™s smart, but what if I donâ€™t know how many characters I want? Say, if I want to match an arbitrary number of digits?\n\nSam: Then you can try the Kleene Star notation. For example, \d* will give you any number of digits (zero or more). A tighter expression would be the Kleene Plus, which will give you at least one such character.\n\nSnow: Thanks bro! Curly Braces, Kleene Star and Kleene Plus, I think I am already a master of REGEX!\n\nSam: Donâ€™t be so sure Snow... I have an easy task for you to see if you know how to use them, just have a try. "}
                ], status:" ðŸ”´"}
