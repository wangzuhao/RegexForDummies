{name:"session 8", layoutItems: [
                {header:"Tests", sessionIndex:"8",
                subHeader:'To write solutions for required functions',
                vModel:"To write solutions for required functions"},
                {header:"Editable Answer Block",
                subHeader:'Please write your answers for question 1 & 2 here\n',
                vModel:"Answer Question 1 - Regex for Search at the next line (Line 2)\n\nAnswer Question 2 - Regex for Search at the next line (Line 4)\n\nAnswer Question 2 - String for Replacement at the next line (Line 6)\n"},
                {header:"Backreferences", subHeader:'',
                vModel:
                "One day, John had a new task. Joffrey asked him to correct the company documents. In detail, some expressions of many products in these documents are confusing even wrong, so John should detect all of them and replace them with a new expression which content is related to the previous ones. "+
                "\n\n"+
                "The workload seems really heavy, can regex help him automatically complete both detection and replacement? "+
                "\n\n"+
                'As mentioned in Group Capture (Section 7), regular expressions allow us to not just match text but also to extract information for further processing. Based on group capture, backreferences allow us to reuse part of the regex match inside the regular expression or afterwards.\n\n8.1 Creation of Backreferences by Round Brackets\n\nWhen grouping part of a regular expression by round brackets, a ‚Äúbackreference‚Äù is also creating at the same time. A backreference stores the part of the string matched by the part of the regular expression inside the parentheses.\n\nFor example, when we apply the regex ¬´Set(Value)?¬ª to match the string ‚ÄûSetValue‚Äù, the corresponding backreference will be automatically created, and here it contains ‚ÄûValue‚Äù. If we apply this regex to the string ‚ÄûSet‚Äù, the corresponding backreference will still be automatically created, but it is empty now, because it did not match anything.\n\n8.2 Invocation of the Value of Backreference\n\nA regex may contain more than one group, i.e., more than one backreference. To figure out the number of a particular backreference, scan the regular expression from left to right and count the opening round brackets. The first bracket starts backreference number one, the second number two, etc. Non-capturing parentheses are not counted.\n\nNow, we can get the value stored in the corresponding backreference by typing a backslash with its backreference number. For example, \\1 points to the first backreference value.\n\nNote that the symbol to get the backreference value may be different in different programming languages and platforms. For example, it is $ in Perl, and it is Match object returned by the Match method of the Regex class in .NET.\n\nIn addition, certain tools make the entire regex match available as backreference zero, such as EditPad Pro or PowerGREP. In Perl, the magic variable $& holds the entire regex match.\n\n8.3 Application of BackReferences in Text Replacement\n\nAs mentioned before, we can reuse backreferences inside the regular expression, or afterwards. What we can do with it afterwards, depends on the tool we are using. For example, we can use the backreference to replace the corresponding text during a search-and-replace operation. In detail, we can apply backreferences to form the replacement, if it depends on the replaced content. (EditPad Pro and PowerGREP just provide such function.)\n\nQuestion 1:\n\nAssume that we have a document about EditPad opened in PowerGREP. There are many texts of "EditPad Lite" and " EditPad Pro", and we want to replace all "EditPad Lite" as "Lite version" and replace all "EditPad Pro" as "Pro version". The String for Replacement has been given below, please provide the regex for search.\n\nString for Replacement: ‚Äú\\1 version‚Äù\n\nRegex for Search: (Give your answer)\n\n8.4 Application of BackReferences in the Regular Expression\n\nBackreferences can not only be used after a match has been found, but also during the match. For example, we can use ¬´([a-c])x\\1x\\1¬ª to match ‚Äûaxaxa‚Äù, ‚Äûbxbxb‚Äù and ‚Äûcxcxc‚Äù.\n\nIf a backreference was not used in a particular match attempt (such as the above example which applies the regex ¬´Set(Value)?¬ª to match the string ‚ÄûSet‚Äù), it is simply empty. Using an empty backreference in the regex is perfectly fine, and it will simply be replaced with nothingness.\n\nQuestion 2:\n\nWhen editing text, doubled words such as ‚Äúthe the‚Äù easily creep in. Assume that we have a document opened in PowerGREP and we want to correct its errors of doubled words. In detail, we search all the doubled words by backreferences first, then delete the second word (i.e., replace the doubled words by the first word). Please provide the regex for search and the string for replacement. (Apply backslash to get backreference value.)\n\nRegex for Search: (Give your answer)\n\nString for Replacement: (Give your answer)'}
                ], status:" üî¥"}
